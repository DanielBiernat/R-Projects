setwd("C:/Users/danie/OneDrive/Pulpit/R studio/inflacja_shiny")
data <- read.csv("PRICES_CPI_10012023123820865.csv")
#https://stats.oecd.org/Index.aspx?DataSetCode=PRICES_CPI
library(dplyr)
library(magrittr)
library(ggplot2)
library(tidyverse)
library(sf)
library(DT)
library(rnaturalearth)
library(rnaturalearthdata)
library(RColorBrewer)
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
data %>% dplyr::select(Subject) %>% levels()
data %<>% filter(Subject=="CPI: 01-12 - All items",Unit=="Percentage",FREQUENCY=="M",Measure=="Percentage change on the same period of the previous year") 
#data %>% filter(Country=="Poland") %>% View()
data %<>% dplyr::select(LOCATION,Country,TIME,Value) 
data$TIME %<>% sapply(function(s){paste(s,"-01",sep="")}) 
data$TIME %<>% as.Date(format="%Y-%m-%d") 
#data %>% filter(Country=="Germany") %>% ggplot(aes(x=TIME,y=Value))+geom_line()
map <- map_data("world")
t="2021-03-01"
infl <- function(t,kraj){
  return(data %>% filter(Country==kraj &TIME==t) %>% dplyr::select(Value) %>% as.numeric())
}
infl %<>% Vectorize() 
world_map <- ne_countries(scale = 50, returnclass = 'sf')
european_union <- c("Austria","Belgium","Bulgaria","Croatia","Cyprus",
                    "Czech Rep.","Denmark","Estonia","Finland","France",
                    "Germany","Greece","Hungary","Ireland","Italy","Latvia",
                    "Lithuania","Luxembourg","Malta","Netherlands","Poland",
                    "Portugal","Romania","Slovakia","Slovenia","Spain",
                    "Sweden","United Kingdom")
european_union_map <-   world_map %>%   filter(name %in% european_union)
bbox_europe <- st_bbox(c(xmin = -10, ymin = 20, xmax = 50, ymax = 80), crs = st_crs(european_union_map))

european_union_map_cropped <- st_crop(european_union_map, bbox_europe)


library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(

    # Copy the line below to make a select box 
    selectInput("select", label = h3("Panstwo"), 
                choices = as.list(european_union)),
    
    hr(),
    plotOutput("plot", click = "plot_click"),
    selectInput("t", label = h3("Miesiac"), 
                choices = as.list(data$TIME %>% as.factor() %>% levels())),
    hr(),
    fluidRow(
    column(4,
    plotOutput("map", click = "plot_click"),
    hr()),
    column(4,
    plotOutput("bar", click = "plot_click"),
    hr())
    ),
    DT::dataTableOutput("mytable"),
    fluidRow(
      column(4,
             selectInput("country1", label = h3("Panstwo 1:"), 
                         choices = as.list(european_union))
             
             ),
      column(4,
             selectInput("country2", label = h3("Panstwo 2:"), 
                         choices = as.list(european_union))
             
      ),
      plotOutput("plot2", click = "plot_click")
      
    )
  
   
)

# Define server logic required to draw a histogram
server <- function(input, output) {
  output$plot <- renderPlot({
    data %>% filter(Country==input$select) %>% ggplot(aes(x=TIME,y=Value))+
      geom_line(color = "#0099f9", size = 2) +
      geom_point(color="red")+
      geom_text(
        aes(label = round(Value, digits = 1)),
        nudge_x = 0.25,
        nudge_y = 0.25,
        check_overlap = TRUE,
        size = 5
      )
  }, res = 96)
  output$map <- renderPlot({
    df <- 
      tibble(country = european_union,
             some_value = infl(input$t,european_union))
    map <- 
      european_union_map_cropped %>% 
      left_join(df, by = c("name" = "country"))
    ggplot(data = map) +
      geom_sf(mapping = aes(fill = some_value)) +
      scale_fill_gradient(name = "", low = "green", high = "red", na.value = "grey50") +
     # scale_colour_gradientn(colours = myPalette(1), limits=c(-10, 25))+
      labs(title = "Inflacja w europie") +
      theme(plot.title.position = "plot")
  }, res = 96) 
  output$mytable = DT::renderDataTable({
     data %>% filter(TIME==input$t)%>% dplyr::select(Country,Value) %>% filter(Country %in% european_union)
  })
   output$bar = renderPlot({data %>% filter(TIME==input$t)%>% dplyr::select(Country,Value) %>% filter(Country %in% european_union) %>% 
       mutate(Country = fct_reorder(Country,Value)) %>%
       ggplot( aes(x=Country, y=Value)) +
       geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
       coord_flip() +
       xlab("") +
       theme_bw()}, res = 96) 
   output$plot2 <- renderPlot({
     data %>% filter(Country %in% c(input$country1,input$country2)) %>% 
       ggplot(aes(x=TIME,y=Value,colour=Country))+geom_line()
       
   }, res = 96)
}

# Run the application 
shinyApp(ui = ui, server = server)
